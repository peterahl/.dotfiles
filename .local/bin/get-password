#!/usr/bin/env bb

(require '[cheshire.core :as json]
         '[babashka.process :as p])

(def debug? (System/getenv "DEBUG"))

(defn error [msg]
  (println (str "\u001b[31mERROR: " msg "\u001b[0m"))
  (System/exit 1))

(defn debug [msg]
  (when debug?
    (println (str "\u001b[33mDEBUG: " msg "\u001b[0m"))))

(defn get-1password-items []
  (try
    (let [result @(p/process ["op" "item" "list" "--categories" "LOGIN" "--format" "json"] 
                             {:out :string :err :string})]
      (when-not (zero? (:exit result))
        (error (str "1Password CLI failed:\n" (:err result))))
      (json/parse-string (:out result) true))
    (catch Exception e
      (error (str "Failed to get items: " (ex-message e))))))

(defn select-item [items]
  (try
    (let [titles (map :title items)
          titles-str (clojure.string/join "\n" titles)
          result @(p/process ["wofi" "--dmenu" "--prompt" "Select password"]
                             {:in titles-str :out :string :err :string})]
      (clojure.string/trim (:out result)))
    (catch Exception e
      (error (str "Wofi selection failed: " (ex-message e))))))

(defn get-password [id]
  (try
    (let [result @(p/process ["op" "item" "get" id "--format" "json" "--fields" "password"]
                             {:out :string :err :string})]
      (debug (str "Raw 1Password response:\n" (:out result)))
      
      (when-not (zero? (:exit result))
        (error (str "1Password CLI error:\n" (:err result))))
      
      (let [parsed (try 
                     (json/parse-string (:out result) true)
                     (catch Exception e
                       (error (str "Invalid JSON response:\n" (:out result)))))]
        (or (:value parsed)
            (error (str "Password field missing in:\n" (:out result))))))
    (catch Exception e
      (error (str "Password retrieval failed: " (ex-message e))))))

; (defn type-password [password]
;   (try
;     @(p/process ["wtype" "-d" "50" password])
;     (catch Exception e
;       (error (str "Input tool failed: " (ex-message e))))))

(defn type-password [password]
  (try
    @(p/process ["ydotool" "type" password] 
                {:env {"YDOTOOL_SOCKET" "/tmp/.ydotool_socket"}})
    (catch Exception e
      (error (str "Input tool failed: " (ex-message e))))))
      

;; Main execution
(when-let [items (seq (get-1password-items))]
  (when-let [selected-title (select-item items)]
    (when-let [selected-item (first (filter #(= (:title %) selected-title) items))]
      (when-let [password (get-password (:id selected-item))]
        (type-password password)))))#!/usr/bin/env bb


