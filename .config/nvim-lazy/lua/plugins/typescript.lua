-- local Util = require("lazyvim.util")

return {
  -- add typescript to treesitter
  -- {
  --   "nvim-treesitter/nvim-treesitter",
  --   opts = function(_, opts)
  --     if type(opts.ensure_installed) == "table" then
  --       vim.list_extend(opts.ensure_installed, { "typescript", "tsx", "vue" })
  --     end
  --   end,
  -- },
  --
  -- -- correctly setup lspconfig
  -- {
  --   "neovim/nvim-lspconfig",
  --   opts = {
  --     -- make sure mason installs the server
  --     servers = {
  --       ---@type lspconfig.options.tsserver
  --       tsserver = {
  --         settings = {
  --           completions = {
  --             completeFunctionCalls = true,
  --           },
  --         },
  --         init_options = {
  --           preferences = {
  --             includeInlayParameterNameHints = 'all',
  --             includeInlayParameterNameHintsWhenArgumentMatchesName = true,
  --             includeInlayFunctionParameterTypeHints = true,
  --             includeInlayVariableTypeHints = true,
  --             includeInlayPropertyDeclarationTypeHints = true,
  --             includeInlayFunctionLikeReturnTypeHints = true,
  --             includeInlayEnumMemberValueHints = true,
  --             importModuleSpecifierPreference = 'non-relative',
  --           },
  --         },
  --       },
  --     },
  --     setup = {
  --       tsserver = function(_, opts)
  --         Util.lsp.on_attach(function(client, buffer)
  --           if client.name == "tsserver" then
  --             client.server_capabilities.documentFormattingProvider = false
  --             -- stylua: ignore
  --             vim.keymap.set("n", "<leader>co", "<cmd>TypescriptOrganizeImports<CR>",
  --               { buffer = buffer, desc = "Organize Imports" })
  --             -- stylua: ignore
  --             vim.keymap.set("n", "<leader>cR", "<cmd>TypescriptRenameFile<CR>",
  --               { desc = "Rename File", buffer = buffer })
  --           end
  --         end)
  --         require("typescript").setup({ server = opts })
  --         return true
  --       end,
  --     },
  --   },
  -- },
}
